-- Haskell module generated by the BNF converter

module SkelLatte where

import qualified AbsLatte

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLatte.Ident -> Result
transIdent x = case x of
  AbsLatte.Ident string -> failure x
transProgram :: AbsLatte.Program -> Result
transProgram x = case x of
  AbsLatte.Program topdefs -> failure x
transTopDef :: AbsLatte.TopDef -> Result
transTopDef x = case x of
  AbsLatte.FnDef type_ ident args block -> failure x
transArg :: AbsLatte.Arg -> Result
transArg x = case x of
  AbsLatte.Arg type_ ident -> failure x
transBlock :: AbsLatte.Block -> Result
transBlock x = case x of
  AbsLatte.Block stmts -> failure x
transStmt :: AbsLatte.Stmt -> Result
transStmt x = case x of
  AbsLatte.Empty -> failure x
  AbsLatte.BStmt block -> failure x
  AbsLatte.Decl type_ items -> failure x
  AbsLatte.Ass ident expr -> failure x
  AbsLatte.Incr ident -> failure x
  AbsLatte.Decr ident -> failure x
  AbsLatte.Ret expr -> failure x
  AbsLatte.VRet -> failure x
  AbsLatte.Cond expr stmt -> failure x
  AbsLatte.CondElse expr stmt1 stmt2 -> failure x
  AbsLatte.While expr stmt -> failure x
  AbsLatte.SExp expr -> failure x
transItem :: AbsLatte.Item -> Result
transItem x = case x of
  AbsLatte.NoInit ident -> failure x
  AbsLatte.Init ident expr -> failure x
transType :: AbsLatte.Type -> Result
transType x = case x of
  AbsLatte.Int -> failure x
  AbsLatte.Str -> failure x
  AbsLatte.Bool -> failure x
  AbsLatte.Void -> failure x
  AbsLatte.Fun type_ types -> failure x
transExpr :: AbsLatte.Expr -> Result
transExpr x = case x of
  AbsLatte.EVar ident -> failure x
  AbsLatte.ELitInt integer -> failure x
  AbsLatte.ELitTrue -> failure x
  AbsLatte.ELitFalse -> failure x
  AbsLatte.EApp ident exprs -> failure x
  AbsLatte.EString string -> failure x
  AbsLatte.Neg expr -> failure x
  AbsLatte.Not expr -> failure x
  AbsLatte.EMul expr1 mulop expr2 -> failure x
  AbsLatte.EAdd expr1 addop expr2 -> failure x
  AbsLatte.ERel expr1 relop expr2 -> failure x
  AbsLatte.EAnd expr1 expr2 -> failure x
  AbsLatte.EOr expr1 expr2 -> failure x
transAddOp :: AbsLatte.AddOp -> Result
transAddOp x = case x of
  AbsLatte.Plus -> failure x
  AbsLatte.Minus -> failure x
transMulOp :: AbsLatte.MulOp -> Result
transMulOp x = case x of
  AbsLatte.Times -> failure x
  AbsLatte.Div -> failure x
  AbsLatte.Mod -> failure x
transRelOp :: AbsLatte.RelOp -> Result
transRelOp x = case x of
  AbsLatte.LTH -> failure x
  AbsLatte.LE -> failure x
  AbsLatte.GTH -> failure x
  AbsLatte.GE -> failure x
  AbsLatte.EQU -> failure x
  AbsLatte.NE -> failure x

